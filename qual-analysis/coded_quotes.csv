Participant,Quote,Final Code
P1,"I think people usually sacrifice comprehension for convenience. They just want the result and do not want to engage in the process. You know, people are often lazy and don't want to understand the code. They just want to ensure that the code runs correctly. ",Code Execution Preferred for Validation
P1,"The advantage of having a summary for some remote parts of the code is that if I'm not familiar with them, I can use the summary to understand them quickly. Once I understand the code, it may help me figure out how to modify it.",Summaries Help Understand Code
P1,"Reading the summaries can take some time, and it may slow down the modification process because I need to ensure I understand the function correctly.",Reading Summaries Takes Effort
P1,"After I read the summary, I might think, ‘Okay, this function is not the correct one that I should modify. I need to switch to another function and check. Maybe I should notify that.’",Summaries Help Determine If Intended Location
P1,"The advantage of direct prompt is that I can directly write my command in that format, and I will be more confident that the modifications will align with my intentions, as all the contents in direct prompting are what I wrote before.",Direct Prompting Enables Confident Specification
P1,"Direct prompting is more intuitive and quicker, but it's prone to error.","Direct Prompting Is Flexible, Urgency Favors Direct Prompting, Direct Prompting Prone to Errors"
P1,"I find that with summary mode, it's sometimes challenging to determine where to insert or modify my changes in the summary. This difficulty arises when I need to find specific parts that need modification in long summaries.",Appropriate Granularity Is Important for Editing
P1,"For a very complex task, I would prefer using the summary mode first because the task is too complex, and I want to understand the function of the piece of code. ",Complex Tasks Trigger Summary-Mediated Prompting
P1,"After that, I may either choose to use the summary mode to modify it or use the direct prompting mode, depending on other factors.",Prompting Strategy Switching Based on Context
P1,"I first need to go through the entire summary. Since the summary contains several sentences, it would be helpful if I could identify any links between each sentence or sub-sentence in the summary and the code in the original file. For example, if I hover over a sentence in the summary, it could show me which part of the code it corresponds to. The correlation is important.",Summary-Code Mapping Improves Traceability
P2,Sometimes I let the large language models modify a code snippet that I am not quite familiar with.,Unfamiliar Code Encourages LLM Editing
P2,"ChatGPT has often modified my correctly implemented code to make it incorrect. Sometimes it deletes my comments to simplify the code, which hurts my code readability.",LLM Modifications May Introduce Unintended Effects
P2,"One way is to use large language models to explain the code to me, and then I'll judge for myself if the generated code or the improved version is reasonable.",Summaries Support Semantic Validation
P2,Another approach is to simply run the code and see if the final result is good or if the modified code is executable.,Code Execution Preferred for Validation
P2,"If the code modification instruction is partially covered by the code summarization, I can modify some parameters in the code summary to actually modify the code instead of writing the entire prompt. This can save a lot of time.",Editing Summaries Reduces Typing Effort
P2,"With summary-mediated prompting, I first need to read through all the code explanations. As a non-native English speaker, it also took me some time to read the English summarization response.",Reading Summaries Takes Effort
P2,"For summary-mediated prompting, I feel a much better sense of control because I need to fully comprehend or read the code summary to modify the code.",Summaries Force Comprehension Before Modification
P2,"With direct instruction prompting, I sometimes just ask the large language model to modify the code and then inspect the output without caring if I understand the original code or not.",Trust In LLMs Favors Direct Prompting
P2,"If it is a very simple task, I will simply use direct instruction prompting because I trust that the large language model can actually solve it.","Simple Tasks Favor Direct Prompting, Trust In LLMs Favors Direct Prompting"
P2,"If the task is more comprehensive, I will first use summary-mediated prompting to help me understand the code.",Complex Tasks Trigger Summary-Mediated Prompting
P2,"If the code scope is really large and I don't want to spend time comprehending the code, I would probably just use direct instruction to save time.",Large Scope Favors Direct Prompting
P2,"If it is just three to five lines, I may prefer summary-mediated prompting because I feel I have better control. It will not cost me too much extra time compared to direct instruction.",Small Scope Favors Summary Prompting
P3,I don’t like making large-scale changes to code because I don’t like it being beyond my control.,Developers Prefer Incremental Changes
P3,"Even if the final result is correct, if I can’t understand every line of the code, I will doubt it.",Comprehension Is Necessary For Validation
P3,"If I don’t understand the generated code and just accept it, the risk increases as the project grows. Debugging that later may cost more than checking summaries early on.",Early Comprehension Prevents Future Debugging Costs
P3,"If the code is hard to understand, or the language or framework is unfamiliar, I ask myself whether I want to learn it. If yes, I’ll use the summary to help understand the logic. Sometimes it’s fun to learn something new in just a few seconds.",Learning Motivates Summary Prompting
P3,The summary at least helps me quickly understand the structure.,Summaries Help Understand Code
P3,"Through the natural language description, I can infer where the bug might be.",Summaries Help Determine If Intended Location
P3,"I can look at the generated summary and tweak the sentence directly, rather than inventing a full prompt from scratch.","Summaries Help Scaffold Complex Prompts, Editing Summaries Reduces Typing Effort"
P3,"I just added an emphasis like: ‘Please note that you must finish something.’ If I do the same in Direct Instruction, the sentence might affect the entire code block.",Summaries Help Prevent Unintended Edits
P3,"When the summary is imprecise, I prefer to leave the original sentence unchanged and add a note to highlight what's important.",Summary Usefulness Depends on Goal Alignment
P3,"Each sentence or chunk in the summary corresponds to a specific code section. So when I add a note, I believe it will affect only the relevant part.",Summaries Help Prevent Unintended Edits
P3,"Reading the summary takes time, which some may see as wasteful. ",Reading Summaries Takes Effort
P3,But I think it’s good. I prefer to understand every line of code I write—even if it’s generated by an LLM—so I can modify it with confidence.,Comprehension Is Necessary For Validation
P3,"If the user doesn’t want to read the code or care about the logic, and just wants the output to work, Direct Instruction is a cheaper solution in terms of effort.",Urgency Favors Direct Prompting
P4,I prefer to validate right after the LLM makes changes. ,Code Execution Preferred for Validation
P4,"You need to have some control over what the AI modifies—otherwise, you won’t know what it changed.",LLM Modifications May Introduce Unintended Effects
P4,"If it's my own code and the AI modifies it, I would definitely read through the output to understand the changes.","Maintenance Interest Favors Summary Prompting, Comprehension Is Necessary For Validation"
P4,Summary-mediated prompting depends on the level and detail of the summary. ,Appropriate Granularity Is Important for Editing
P4,"For example, if I generate a summary at the function level, it might be too general and not point out the exact place to modify.",Overly High-Level Summaries Obscure Edit Points
P4,"But if I generate a summary just for an if-else block, it's more precise.",Appropriate Granularity Is Important for Editing
P4,Summary-mediated prompting seems more accurate than direct instruction prompting.,Direct Prompting Prone to Errors
P4,It’s like the summary gives a more complete prompt.,Summaries Provide a More Comprehensive Prompt
P4,"If I change something small—like ‘above’ to ‘bottom’—while keeping the rest of the summary the same, it helps constrain the LLM from modifying unintended areas. This makes me more confident in the output.",Summaries Help Prevent Unintended Edits
P4,"Each time the summary is generated, the structure is different. This could affect the user experience. In the first summary a variable might be mentioned, but in the regenerated summary that variable could disappear. If I want to modify the same variable again, it becomes harder.",Inconsistent Summaries Undermine Usability
P5,"When I copy and paste a large amount of code. I feel like I have less control over what gets changed. Side effects happen when I copy an entire file just to modify a few lines of code. Sometimes, this leads to unintended bugs in parts of the code that were originally correct. I usually only realize these issues when I run the code.",LLM Modifications May Introduce Unintended Effects
P5,"One way I try to avoid this is by copying and pasting only the specific parts that need to be modified instead of the entire file. However, sometimes the LLM needs the full context of the surrounding code to make accurate modifications. So, it’s a trade-off.",Describing Bug Context To LLMs Is Effortful
P5,"When I use summary prompts, I pay more attention to understanding the code's semantics. ",Summaries Force Comprehension Before Modification
P5,I think running the code is a good way to check the syntax and see if it works. ,Code Execution Preferred for Validation
P5,"But to understand what the code is actually doing, I found that summarizing was very useful for understanding its semantics.",Summaries Help Understand Code
P5,"If it's a one-time task where I just need to run something once and won't use the code again, I don't need to know the details of how it works.",Programmers Prioritize Comprehension for Long-Term Projects
P5,"I think it depends a lot on the use case. If it's code that I will interact with frequently, like my own codebase, I would want to understand it. [...] However, in most cases, I'm working with a codebase that I will be interacting with for a long time, so I want to understand how it works and what changes I am introducing.",Maintenance Interest Favors Summary Prompting
P5,"For me to understand what the code was doing and to know what needed to change, I used the summary for that, and I liked it.","Summaries Help Understand Code, Summaries Help Determine If Intended Location"
P5,"The disadvantage of the summary is that sometimes the summaries were shorter, and sometimes they were more detailed. The more detailed they were, the easier it was for me to edit. ",Appropriate Granularity Is Important for Editing
P5,I really liked it when the summary included what I wanted to change. ,Summary Usefulness Depends on Goal Alignment
P5,"After understanding it, they also gave me a strategy on what to change, even if I didn't change it directly from the summary. I used the summary to identify which part of the code I wanted to use in direct prompting. ",Summaries Help Determine If Intended Location
P5,"So, it helped me in two ways: understanding the code and deciding which part of the code I wanted to change.","Summaries Help Understand Code, Summaries Help Determine If Intended Location"
P5,I had more control with direct prompting because I was deciding where the code would go and where the modifications would be made.,Direct Prompting Enables Confident Specification
P5,"The major factor is my own understanding of the code and the libraries we were using. [...] For the direct approach, I mostly chose it when I knew exactly which part of the codebase I wanted to modify. This implies that I understood how the code generally worked and knew which part needed to change to meet the requirements.","Clear Intentions Favor Direct Prompting, Familiar Code Favors Direct Prompting"
P5,"I think maybe adding more details when it's longer because I noticed variations in the length of the summaries. So, having a way to expand the summary to include more details would be beneficial. An option to initiate a shorter version with the possibility to expand it further would be useful, I think.",Expandable Summaries Improve Usability
P6,"The modifications given by the LLM are incorrect, then you tell it where the mistakes are and ask it to change them. However, even after the changes, it's still incorrect. This back-and-forth process of constantly ‘educating’ the LLM can be exhausting and even somewhat mentally draining.",Iterative Correction Increases Cognitive Burden
P6,"I think one advantage of the summary is that when you're unfamiliar with the language or the task—in other words, if your coding skills are limited—the natural language summary helps you build an overall understanding quickly. ",Unfamiliar Code Encourages Summary Use
P6,"If I already know what the code is doing, direct prompting is more convenient.",Familiar Code Favors Direct Prompting
P6,"The second advantage is that it saves you typing. For example, if you just want to replace one parameter with another, you can directly change it in the summary instead of re-describing all the background in a direct prompt.",Editing Summaries Reduces Typing Effort
P6,"For things like CSS—like border, background color—if I describe them myself, I might get the wording wrong. But the LLM-generated summary uses more accurate terminology, which helps avoid confusion. Then I can reuse those words for direct prompting. It basically gives me a technical vocabulary to express what I want.",Summaries Provide Accurate Technical Vocabulary
P6,Sometimes I’ll add new sentences to the summary because simple deletions or edits aren’t enough. Adding extra information helps the LLM better adapt to new requirements.,Appropriate Granularity Is Important for Editing
P6,"One issue I’ve encountered is when modifying A to B in the over-detailed summary—you might miss some occurrences of A. If A appears multiple times, and you only edit part of it, leftover fragments may remain. This can raise the error rate.",Overly Detailed Summaries Negatively Impact Usefulness
P6,"The biggest factor is how familiar you are with the coding task. If you're a beginner, summary is more helpful because it helps you understand the code structure and find what to change. If you're experienced, summary may not help as much. But even experts working with a large, unfamiliar codebase may need summaries to grasp the functionality.",Unfamiliar Code Encourages Summary Use
P6,"If the design of the summary could have more layers, it would be easier to understand. For example, to make the summary useful for beginners, intermediate users, and experts, it should present different levels of detail depending on user needs. Maybe add a parameter that lets users choose how detailed the summary should be.",Expandable Summaries Improve Usability
P7,"For Cursor, the biggest issue is performance, especially when using the agent function to modify multiple files simultaneously. The performance is often unsatisfactory.",Tool Performance Affects Prompting Experience
P7,"For prompting, the biggest challenge is effectively communicating my intent to the AI agent. Sometimes, I don’t fully understand the error I’m trying to fix, or I only have a high-level idea of what I want to achieve. In these cases, since I don’t know the technical details myself, it becomes even more challenging for the AI to accomplish the task.",Describing Vague Intentions To LLMs Is Effortful
P7,"For validation, it's often difficult to determine the correctness of the AI’s responses. ",Difficult To Determine Correctness
P7,"Many times, I simply accept the suggestions and check whether the front-end application throws any errors. ",Code Execution Preferred for Validation
P7,"If it doesn’t, I assume the changes are fine. But when new errors appear, I have to go back, scrutinize my code, and debug it again, which can sometimes take longer than solving the problem manually.",Early Comprehension Prevents Future Debugging Costs
P7,"When it makes an error, I have to try prompting the AI again to correct it. It requires extra mental effort, which can be exhausting at times.","Describing Runtime Behavior To LLMs Is Effortful, Iterative Correction Increases Cognitive Burden"
P7,You have to go through the understanding process before making changes. ,Comprehension Is Necessary For Validation
P7,"But sometimes, I don’t think understanding the code in detail is always necessary, so I just choose the second approach.",Urgency Favors Direct Prompting
P7,"I think this study is a special case because I was given very specific requirements. That made me less interested in understanding how things work—I just wanted to complete the task. However, in my actual coding practice, if I know I need to use D3 for a project, I tell myself that I really should learn how to use the library properly. ",Programmers Prioritize Comprehension for Long-Term Projects
P7,"In those cases, I wouldn’t just accept everything AI generates. I would take the time to learn the technology, understand, and analyze the generated code more carefully.",Programmers Prioritize Comprehension for Long-Term Projects
P7,"The prompt selection depends on whether I want to understand the code or not. And It also depends on how confident I am in the AI agent. There were certain tasks where the objective was straightforward, like adding a button. From my prior experience, I know AI is capable of handling such tasks, so in those cases, I feel more confident in its responses and spend less time verifying correctness.",Trust In LLMs Favors Direct Prompting
P7,"If possible, it would be helpful to introduce visualizations to better connect the natural language summary with the corresponding code. If users can quickly find the corresponding code, they can also make modifications more efficiently. Basically, building a more fine-grained connection between the summary and the code itself would be beneficial.",Summary-Code Mapping Improves Traceability
P8,"Another problem is that sometimes it just doesn’t understand my prompt and fails to generate the intended output. This often happens with visualization or frontend code, because LLMs can only reason over code, not preview the final result.",Describing Runtime Behavior To LLMs Is Effortful
P8,"When using languages I’m unfamiliar with, like C++, Kotlin, or Julia, I run into errors I don’t understand. I feed the error message to the LLM, but it just gives another incorrect version. Because I don’t understand the language well, I can’t make sense of the errors either.",Lack of Familiarity Hinders Validation
P8,"If I’m unfamiliar with a library or language, I prefer to use summary-based prompting to help me understand the code logic and ensure I’m modifying it in the right direction. ",Unfamiliar Code Encourages Summary Use
P8,"But in urgent situations where I already understand the code, I just skip the comprehension and focus on whether the output is correct.",Code Execution Preferred for Validation
P8,"Summary helps us first understand what the code does, compare it with the desired changes, and refine the instruction in natural language before asking the LLM to generate the modified code.","Summaries Help Understand Code, Summaries Help Determine If Intended Location"
P8,"Sometimes, the requirements involve an entire file and several functions. I want to pass these functions as a unit to the LLM instead of breaking them down. Each function may have parameters and configurations. The summary helps preserve the semantic integrity of these encapsulated units during modification.",Summaries Help Prevent Unintended Edits
P8,"Summary-based prompting tends to preserve existing semantics by only modifying what’s necessary, which makes me feel more in control. In contrast, direct prompting requires precise targeting and is better suited to small changes. ",Clear Intentions Favor Direct Prompting
P8,"If the model misunderstands my intent, it might touch unrelated parts of the code, so more control is needed.",Summaries Help Prevent Unintended Edits
P8,"If I’m unfamiliar with a technology, such as a library or language, I prefer using summaries to understand the code’s overall logic before making changes.",Unfamiliar Code Encourages Summary Use
P8,"If the change is simple, like editing a statement or changing a function parameter, I prefer direct prompting. ",Simple Tasks Favor Direct Prompting
P8,"But for complex changes that span multiple areas, I prefer summary-based prompting to help the model understand the broader context.",Complex Tasks Trigger Summary-Mediated Prompting
P8,"It would be helpful if summaries were more structured—for example, using Markdown or itemized lists. When the summary is formatted like 1, 2, 3, it becomes easier to read and understand.",Structured Summaries Aid Readability
P8,"In industry, each person usually owns one feature, but features often depend on infrastructure code or APIs. To make changes, you first need to understand how these components work. In these cases, understanding the code matters more than just editing it.",Collaboration Requires Understanding Others’ Code
P9,LLMs struggle to understand internal project connections. Setting up context—especially static analysis data like call graphs—is difficult to integrate into LLMs.,Describing Code Dependency To LLMs Is Effortful
P9,"I’ve noticed a positive correlation between how detailed the prompt is and how much the model tends to over-refactor or embellish the result. If I write a highly detailed prompt for a precise change, the model often adds unnecessary abstractions or optimizations. But what I really want is just the basic functional modification.",Over-Specification Leads to Unintended Effects
P9,One benefit of summary-based prompting is that it helps build understanding quickly when facing an unfamiliar codebase. ,Unfamiliar Code Encourages Summary Use
P9,"From a cognitive standpoint, humans often understand code by function and purpose, so a top-down organization might better align with our mental model.",Structured Summaries Aid Readability
P9,"With summary, I can quickly understand what the code does and then selectively analyze parts of it in more detail. ",Summaries Help Understand Code
P9,"It helps me get into modification mode faster. Direct prompting skips comprehension altogether, so I don’t have to understand the code deeply.",Summaries Force Comprehension Before Modification
P9,"I usually start by summarizing the entire file to understand its purpose, then gradually narrow the scope and refine the summary. Once I’ve scoped down to a ~50-line function, I can generally understand its internal logic.",Summaries Help Progressively Narrowing
P9,"If the current code is A and I want to change it to B, I can use A’s summary phrasing as a model to describe B. This makes it easier for the LLM to understand what I want. So using summaries helps clarify requirements during prompting.",Summaries Provide Accurate Technical Vocabulary
P9,"With direct prompting, I’m not sure whether the AI is just patching issues symptomatically. It might fix one part well but modify other parts poorly, reducing coherence. ",Direct Prompting Prone to Errors
P9,"With summary prompting, I retain an overview of the full code, including untouched parts, which gives me a stronger sense of safety. Though summary requires more holistic thinking, it gives a stronger sense of control.",Summaries Help Prevent Unintended Edits
P9,"How well I understand the code strongly influences my prompting choice. If I’m familiar with the code and know what I want to change, I use direct. ","Familiar Code Favors Direct Prompting, Clear Intentions Favor Direct Prompting"
P9,"If not familiar, I start with summary to build a high-level understanding.",Unfamiliar Code Encourages Summary Use
P9,Then switch to either direct or summary for fine-grained edits.,Prompting Strategy Switching Based on Context
P9,"In large industry projects, I feel that I use summaries much more frequently because I constantly need to understand the code. A high-level understanding of the project becomes more important, especially to ensure that AI modifications don’t break existing functionality. Back in school, most projects were toy projects—breaking things wasn’t a big deal. But now some of our projects are deployed online, and stability is the top priority.",Safe Integration Requires Comprehension
P9,"I think structuring is very important. As I said earlier, humans often understand code through its structure—what modules or functions do. If summary can present code in a more structured way (e.g., module-level, function-level), then writing prompts becomes easier—like filling in the blanks. But current summaries are still mostly in free-form natural language.",Structured Summaries Aid Readability
P10,"Using LLMs to modify code is challenging because you need to clearly specify the desired changes. It often involves copying large chunks of code and precisely describing your intent, which makes context setup and prompt writing more effortful than generating code from scratch.","Describing Bug Context To LLMs Is Effortful, Describing Vague Intentions To LLMs Is Effortful"
P10,"Sometimes, the LLM goes out of control or causes side effects because the prompt fails to fully capture your intention or omits key information.",LLM Modifications May Introduce Unintended Effects
P10,"Normally, I would review the code carefully and run it to validate. But in the study, I relied more on trial and error—running the result to see if it works, then tweaking the prompt if it doesn’t.",Code Execution Preferred for Validation
P10,The summary helped me quickly understand the code and skip manual reading. ,Summaries Help Understand Code
P10,"Sometimes, I used the summary for comprehension, then wrote a direct instruction for the specific change I wanted.","Clear Intentions Favor Direct Prompting, Summaries Help Understand Code, Prompting Strategy Switching Based on Context"
P10,"I prefer to naturally integrate new instructions into the summary, rather than adding a separate description. This way, the workflow remains coherent without any noticeable context gaps. Whether to choose summary prompting mainly depends on whether the instruction can be easily integrated into the description. If it can be partially replaced, ‘where it does X,’ I will directly replace it with ‘where it does Y.’ If extensive rewording of the description is needed, I might prefer to use a direct prompt instead of a summary.","Prompting Strategy Switching Based on Context, Summary Usefulness Depends on Goal Alignment"
P10,"I felt more in control when using the summary, since I didn’t need to worry as much about the LLM changing unintended parts of the code.",Summaries Help Prevent Unintended Edits
P10,"When the code is long, it’s helpful if the summary presents information in a structured way—like bullet points grouped by function or feature.",Structured Summaries Aid Readability
P10,"If I already familiar with the code, I don’t need to convert my intent into the summary. I can just directly say what I want to add or change.",Familiar Code Favors Direct Prompting
P10,"In later tasks, I used direct prompting more for its flexibility.",Direct Prompting Is Flexible
P10,"In industry, you often work with code written by others. You haven’t seen it before, so you need to spend extra effort to understand it before modifying.",Collaboration Requires Understanding Others’ Code
P11,"The biggest problems I've had were when I was working on something with Pygame. It would sometimes forget aspects or constraints that I added. For example, I was trying to make something bounce in a certain way, and after three or four iterations, it would delete the bounce code to make it run faster and do some other modifications. I feel like sometimes it just doesn't really know why I'm doing something, so it kind of just randomly deletes things that it doesn't see as important — but I do.",LLM Modifications May Introduce Unintended Effects
P11,"Comprehending the code's semantics by reading its text or just running it to check the long-term results depends on the project I'm working on. If it's more of an academic project, I prefer to comprehend it because I want to make sure there is quality. ",Programmers Prioritize Comprehension for Long-Term Projects
P11,"But if I'm just trying to make a game or do some visualization stuff, I just care that it looks good.",Urgency Favors Direct Prompting
P11,"Summaries would be helpful for you to write your modification intentions, especially if I need to do a lot of things that I'm unclear about. So just using the summary as a checklist seemed like a good idea.","Summaries Help Scaffold Complex Prompts, Vague Intentions Lead to Summary Use"
P11,"I would either append stuff at the end if I felt like a feature wasn't included, or if there was a clearly defined list of features, I would put it where it aligned — like if you think of code as a narrative, I would put it where it fits in that narrative.",Summaries Help Scaffold Complex Prompts
P11,"If the summary was essentially a little more programmatic, almost like an outline, where you have the function and then a description of what’s happening inside, like with bullet points or a numbered list, it would be very clear.",Structured Summaries Aid Readability
P11,"It depends on how familiar I am with the codebase. I think if I'm very familiar with the codebase, I'm more likely to use direct prompting. ",Familiar Code Favors Direct Prompting
P11,"If I'm unfamiliar with what's going on and I need some additional description, I would probably do more of the summary one.",Unfamiliar Code Encourages Summary Use
P11,"If I have a clear goal, I would go direct because I can just describe it, highlight the part, and tell it what to do. ",Clear Intentions Favor Direct Prompting
P11,"If I have less of a clear goal, I feel like I would lean more towards using the summary.",Vague Intentions Lead to Summary Use
P11,"In industry, if you need to extend features, you have to deal with code that's already written. You face the problem of integration way more often than in a tiny project. In small projects, you're the one who wrote everything, you designed it, and you know all of it. With larger projects, you need to do that extra step of integration.","Safe Integration Requires Comprehension, Collaboration Requires Understanding Others’ Code"
P12,"After I get the code, I just copy and paste it and run it, then I do my own debugging session.",Code Execution Preferred for Validation
P12,The summary would be useful if I needed more comprehension about the code.,Summaries Help Understand Code
P12,"Yeah, I think the summary could help scaffold my intentions [...] because it explains so I can easily understand what this code does, how this code works.","Summaries Help Understand Code, Summaries Help Scaffold Complex Prompts"
P12,"I first read the summary, if it contained exactly the parts related to the task, I would just modify the summary ",Summary Usefulness Depends on Goal Alignment
P12,[...] because I don’t need to type more words.,Editing Summaries Reduces Typing Effort
P12,"If it doesn’t have it, I just direct write instruction you gave me.",Prompting Strategy Switching Based on Context
P12,If I’m trying something totally new — like a language I’ve never used or a task I’ve never done — understanding each part of the generated code becomes another challenge.,Lack of Familiarity Hinders Validation
P12,I used the summary prompting more when I did the second task because I had no background knowledge about D3.,Unfamiliar Code Encourages Summary Use
P13,"It experiences hallucinations. It can provide you with fake information, especially when you have a very large scope to modify.",LLM Modifications May Introduce Unintended Effects
P13,"I might only have a very high-level goal, but I may not know exactly how to write it, the specific steps, which directions to adjust, or which libraries to use.",Describing Vague Intentions To LLMs Is Effortful
P13,"The purpose of coding varies. In this study, I just need to get it running, so fully understanding the code and making modifications doesn’t matter. ","Programmers Prioritize Comprehension for Long-Term Projects, Code Execution Preferred for Validation"
P13,"However, if it's my own project that requires long-term management, or if it’s an industry project with accountability and responsibility, then a complete understanding is necessary.","Programmers Prioritize Comprehension for Long-Term Projects, Safe Integration Requires Comprehension"
P13,"I mainly use direct because, in this study, there isn’t a need to understand much about the code. The requirements are very clear, and in this situation, I already know my intentions and roughly which parts need to be changed.",Clear Intentions Favor Direct Prompting
P13,"I think this summary is quite useful for understanding, especially when you didn't write the code yourself.",Summaries Help Understand Code
P13,"The summary itself may include some context information that could reduce the effort of prompting. If you use a direct prompt, you might have to write a lot of context for it.",Editing Summaries Reduces Typing Effort
P13,Text-based summaries can sometimes distract you with extra details when they are long. ,Overly Detailed Summaries Negatively Impact Usefulness
P13,Highlighting key points and keywords is helpful for validation and can even suggest direct manipulation for edits.,Structured Summaries Aid Readability
P13,"My familiarity with the code affects my choice. If I am already familiar with this code, whether I wrote it myself or have read it many times, I know the logic of the code. In that case, I prefer to go directly because direct information doesn’t distract you with extra details. ",Familiar Code Favors Direct Prompting
P13,"When I encounter new code that I'm not familiar with, I first use a summary to understand the code's logic, what each function does, and how they depend on each other.",Unfamiliar Code Encourages Summary Use
P13,"I actually don't understand the syntax of D3 at all. Sometimes, I encounter problems with how to express my needs using appropriate vocabulary or industry standards, where summaries may help.",Summaries Provide Accurate Technical Vocabulary
P13,"In the industry, there will be specific unit test cases with dedicated files. You need to run them, and the testing unit will indicate where the bug is.",Unit Tests Support LLM Validation
P13,"The problems that arise in the industry will ultimately be traced back to the owner of the pull request, requiring a better understanding of LLM generations or modifications. Otherwise, it will be difficult to trace the source of bugs.",Safe Integration Requires Comprehension
P13,"The company's code often includes domain-specific code, and it may have some internal infrastructure code. Unlike publicly available packages, LLMs don’t have this knowledge. In this case, LLMs need a prior index over the library to understand each function's functionality, rather than just relying on the function names.",LLMs Lack Internal Company Code Context
P13,"In an ideal situation, it might first give you a plan, providing a justification for changes, explaining why such changes are needed, and what the consequences will be. Sometimes, it might even include some example use cases. Then, after you give it permission or confirmation that the approach is correct, it will make the modifications. This ensures that you at least understand the changes it is about to make and can validate the results.",Intermediate Steps Before Committing
P14,"A challenge is the need to figure out and specify ‘where to modify’; many times, I prefer to directly throw the entire code to GPT and let it make the changes.",Locating Where to Modify Is Challenging
P14,"AI programming is challenging for GPT because it only outputs common structures, making it particularly difficult to align input and output tensor sizes between layers.",Describing Runtime Behavior To LLMs Is Effortful
P14,"For validation, I usually just run its output directly in my code. I don’t typically make an effort to understand the actual changes in the code’s text; instead, I generally determine if it’s what I want by looking at the output results.",Code Execution Preferred for Validation
P14,"However, a major issue with directly checking the results is that sometimes GPT adds or omits elements that you actually need, and these might not be immediately noticeable in the execution. Sometimes, a small trick added by GPT can lead to a bug that is only discovered later.",LLM Modifications May Introduce Unintended Effects
P14,"Sometimes the summary is too general. It would be more useful if it could be divided into smaller parts, detailing what specific lines do. Then, I could provide more precise guidance on which part should be modified.",Overly High-Level Summaries Obscure Edit Points
P14,I think it's important for the summary to align with the code structure.,Structured Summaries Aid Readability
P14,The flexibility of writing direct instruction is relatively good.,Direct Prompting Is Flexible
P14,"I prefer to first summarize, then have it tell me what each line does.",Summaries Help Understand Code
P14,"Afterwards, I use direct instruction to highlight a small section of the function for it to modify. This is because sometimes LLM might change other parts, but I may have already verified that those parts are correct, and I don’t want them altered. I only want it to change the section I highlight.",Prompting Strategy Switching Based on Context
P15,"Sometimes I need to provide a lot of context to LLMs to modify code, which requires a lot of effort.",Describing Bug Context To LLMs Is Effortful
P15,"Sometimes there is code you want to understand, and sometimes there is code you don’t care about because it’s just a waste of time.",Programmers Prioritize Comprehension for Long-Term Projects
P15,The summary is really useful because it saves me a lot of time compared to looking into the documentation.,Summaries Help Understand Code
P15,Sometimes the summary does not provide the needed information and adds a kind of cognitive burden to reading.,Reading Summaries Takes Effort
P15,"Sometimes I didn’t like direct instruction because at some point, I felt I lost control over the code. Sometimes, I would just directly accept the response from LLMs and run the code to see if it worked.",Code Execution Preferred for Validation
P15,"Sometimes the summary actually helped me better understand what I wanted to do. [...] [Direct instruction] is not helping me grow as a developer. I think that, in some ways, these LLMs are harming my cognitive process for understanding code and logic.",Summaries Help Understand Code
P15,"I think the summary gave me a greater sense of control, but sometimes it did not provide me with good explanations.",Summary Usefulness Depends on Goal Alignment
P15,"Cursor and ChatGPT responses sometimes include a lot of extra information, but they can be too long and difficult to read. At times like these, I prefer to go back to Stack Overflow because I know I will get a simpler and faster answer.",Reading Summaries Takes Effort
P15,"When I'm trying to modify code with LLMs, I don’t want to feel like I’m losing control over my code. I would like something that explains the code, explains the changes, and goes directly to the point.",Summaries Help Understand Code
P15,"I would like to have a combination: first a summary, then an analysis of the change, and then the correct change. [...] At some point, I was just copying, pasting, and trusting the LLM blindly.","Prompting Strategy Switching Based on Context, Intermediate Steps Before Committing"